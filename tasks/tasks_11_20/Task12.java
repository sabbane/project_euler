package tasks_11_20;

import java.util.ArrayList;
import java.util.Map;
import java.util.TreeMap;

import org.junit.Test;

/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
 */
public class Task12 {
	@Test
	public void test() {
		int limit = 500;
		long n = (long) Math.pow(10, 5);
		Map<Long, Integer> numbers = new TreeMap<>();
		numbers.put((long) 1, 1);
		numbers.put((long) 3, 2);
		numbers.put((long) 6, 4);
		numbers.put((long) 10, 4);
		// long result = 0;
		long triangleNumber = 10;

		long time1 = System.currentTimeMillis();
		for (int i = 5; i < n; i++) {
			if (i % Math.pow(10, 3) == 0) {
				long time2 = System.currentTimeMillis();
				System.out.println("reached: " + i + "     (" + (time2 - time1) / 1000 + "  sec.)");
				time1 = System.currentTimeMillis();
			}
			triangleNumber += i;
			if (calculateDivisors(triangleNumber, numbers) > limit) {
				System.out.println("Result: " + triangleNumber);
				break;
			}
		}
	}

	// TODO: Currently the solution needs more than 20 min on a good set up. It
	// should be optimized
	private int calculateDivisors(long triangleNumber, Map<Long, Integer> numbers) {
		int firstDivisor = 1, divisorsCounter = 1;
		ArrayList<Long> keys = new ArrayList<>(numbers.keySet());
		for (int i = numbers.size() - 1; i > 1; i--) {
			if (triangleNumber % keys.get(i) == 0) {
				divisorsCounter += numbers.get(keys.get(i));
				firstDivisor = i + 1;
				break;
			}
		}

		if (divisorsCounter == 1) {
			divisorsCounter++;
			firstDivisor++;
		}

		for (long i = firstDivisor; i <= (triangleNumber / 2); i++) {
			if (triangleNumber % i == 0) {
				divisorsCounter++;
			}
		}
		numbers.put(triangleNumber, divisorsCounter);
		return divisorsCounter;
	}

	// private int firstCalculateDivisors(long triangleNumber) {
	// int divisorsCounter = 0;
	// for (long i = triangleNumber; i >= 1; i--) {
	// if (triangleNumber % i == 0) {
	// divisorsCounter++;
	// }
	// }
	// return divisorsCounter;
	// }

	// private List<Long> generateTriangleNumbers(long n) {
	// List<Long> triangleNumbers = new ArrayList<>();
	// for (int i = 1; i < n; i++) {
	// triangleNumbers.add(generateTriangleNumber(i));
	// }
	// return triangleNumbers;
	// }

	// private Long generateTriangleNumber(int number) {
	// long currentTriangleNumber = 0;
	// for (int i = number; i >= 1; i--) {
	// currentTriangleNumber += i;
	// }
	// return currentTriangleNumber;
	// }
}
